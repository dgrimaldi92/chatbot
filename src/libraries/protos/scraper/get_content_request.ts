// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "get_content_request.proto" (package "scrape", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message scrape.GetScrapeRequest
 */
export interface GetScrapeRequest {
    /**
     * @generated from protobuf field: repeated string queries = 1
     */
    queries: string[];
    /**
     * @generated from protobuf field: string user_query = 2
     */
    userQuery: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetScrapeRequest$Type extends MessageType<GetScrapeRequest> {
    constructor() {
        super("scrape.GetScrapeRequest", [
            { no: 1, name: "queries", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_query", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetScrapeRequest>): GetScrapeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.queries = [];
        message.userQuery = "";
        if (value !== undefined)
            reflectionMergePartial<GetScrapeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetScrapeRequest): GetScrapeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string queries */ 1:
                    message.queries.push(reader.string());
                    break;
                case /* string user_query */ 2:
                    message.userQuery = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetScrapeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string queries = 1; */
        for (let i = 0; i < message.queries.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.queries[i]);
        /* string user_query = 2; */
        if (message.userQuery !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userQuery);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scrape.GetScrapeRequest
 */
export const GetScrapeRequest = new GetScrapeRequest$Type();
