// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "get_content_response.proto" (package "scrape", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Scrape } from "./scrape";
/**
 * @generated from protobuf message scrape.GetScrapedResponse
 */
export interface GetScrapedResponse {
    /**
     * @generated from protobuf field: repeated scrape.Scrape scrape = 1
     */
    scrape: Scrape[];
}
// @generated message type with reflection information, may provide speed optimized methods
class GetScrapedResponse$Type extends MessageType<GetScrapedResponse> {
    constructor() {
        super("scrape.GetScrapedResponse", [
            { no: 1, name: "scrape", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Scrape }
        ]);
    }
    create(value?: PartialMessage<GetScrapedResponse>): GetScrapedResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.scrape = [];
        if (value !== undefined)
            reflectionMergePartial<GetScrapedResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetScrapedResponse): GetScrapedResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated scrape.Scrape scrape */ 1:
                    message.scrape.push(Scrape.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetScrapedResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated scrape.Scrape scrape = 1; */
        for (let i = 0; i < message.scrape.length; i++)
            Scrape.internalBinaryWrite(message.scrape[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scrape.GetScrapedResponse
 */
export const GetScrapedResponse = new GetScrapedResponse$Type();
