// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "prompt.proto" (package "llm", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Role } from "./role";
/**
 * @generated from protobuf message llm.Prompt
 */
export interface Prompt {
    /**
     * @generated from protobuf field: string content = 1
     */
    content: string;
    /**
     * @generated from protobuf field: llm.Role role = 2
     */
    role: Role;
}
// @generated message type with reflection information, may provide speed optimized methods
class Prompt$Type extends MessageType<Prompt> {
    constructor() {
        super("llm.Prompt", [
            { no: 1, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "role", kind: "enum", T: () => ["llm.Role", Role, "ROLE_"] }
        ]);
    }
    create(value?: PartialMessage<Prompt>): Prompt {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.content = "";
        message.role = 0;
        if (value !== undefined)
            reflectionMergePartial<Prompt>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Prompt): Prompt {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string content */ 1:
                    message.content = reader.string();
                    break;
                case /* llm.Role role */ 2:
                    message.role = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Prompt, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string content = 1; */
        if (message.content !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.content);
        /* llm.Role role = 2; */
        if (message.role !== 0)
            writer.tag(2, WireType.Varint).int32(message.role);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message llm.Prompt
 */
export const Prompt = new Prompt$Type();
